version: "3.4"

volumes:
  database:
    driver: local
  redis:
    driver: local

services:

  midarr:
    container_name: midarr
    build: .
    ports:
      - 4000:4000
    volumes:
      - ./:/app
      - ./dev/library:/library
    environment:
      - APP_URL=http://midarr:4000

      - DB_HOSTNAME=postgresql
      - DB_HOSTNAME_TEST=postgresql-test
      - DB_USERNAME=my_user
      - DB_PASSWORD=my_password
      - DB_DATABASE=my_database

      - SETUP_ADMIN_EMAIL=admin@email.com
      - SETUP_ADMIN_NAME=admin
      - SETUP_ADMIN_PASSWORD=passwordpassword

      - OAUTH_ISSUER_URL=http://localhost:9000
      - OAUTH_AUTHORIZE_URL=http://localhost:9000/application/o/authorize/
      - OAUTH_TOKEN_URL=http://server-authentik:9000/application/o/token/
      - OAUTH_CLIENT_ID=someClientId
      - OAUTH_CLIENT_SECRET=someClientSecret
      - OAUTH_REDIRECT_URI=http://localhost:4000/auth/authentik/callback
      - OAUTH_USER_URL=http://server-authentik:9000/application/o/userinfo/

      - RADARR_BASE_URL=http://radarr:7878
      - RADARR_API_KEY=d031e8c9b9df4b2fab311d1c3b3fa2c5
      - SONARR_BASE_URL=http://sonarr:8989
      - SONARR_API_KEY=1accda4476394bfcaddefe8c4fd77d4a
    depends_on:
      postgresql:
        condition: service_healthy
      postgresql-test:
        condition: service_healthy
      radarr:
        condition: service_healthy
      sonarr:
        condition: service_healthy
    command: sh -c "chmod u+x entry-local.sh && ./entry-local.sh"

  postgresql:
    container_name: postgresql
    image: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=my_user
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=my_database
    healthcheck:
      test: "exit 0"

  postgresql-test:
    container_name: postgresql-test
    image: postgres
    environment:
      - POSTGRES_USER=my_user
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=my_database
    healthcheck:
      test: "exit 0"

  radarr:
    container_name: radarr
    image: linuxserver/radarr:version-4.1.0.6175
    ports:
      - 7878:7878
    volumes:
      - ./dev/radarr/config.xml:/config/config.xml
      - ./dev/library:/library
    environment:
      - PUID=1000
      - PGID=1000
    healthcheck:
      test: "exit 0"

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:version-3.0.9.1549
    ports:
      - 8989:8989
    volumes:
      - ./dev/sonarr/config.xml:/config/config.xml
      - ./dev/library:/library
    environment:
      - PUID=1000
      - PGID=1000
    healthcheck:
      test: "exit 0"

  postgresql-authentik:
    image: docker.io/library/postgres:12-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env

  redis-authentik:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data

  server-authentik:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.5.3}
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis-authentik
      AUTHENTIK_POSTGRESQL__HOST: postgresql-authentik
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    env_file:
      - .env
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      - postgresql-authentik
      - redis-authentik

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.5.3}
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis-authentik
      AUTHENTIK_POSTGRESQL__HOST: postgresql-authentik
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    depends_on:
      - postgresql-authentik
      - redis-authentik